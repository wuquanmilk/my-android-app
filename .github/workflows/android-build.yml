name: Android APK Build (NDK r28c + 16K Alignment)

on:
  workflow_dispatch:  # 允许手动触发
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - '**.kv'
      - 'buildozer.spec'
      - '.github/workflows/**'

env:
  NDK_VERSION: "28c"
  NDK_FULL_VERSION: "28.2.13676358"
  ANDROID_API: 31
  MIN_API: 21
  BUILD_TOOLS: "34.0.0"
  PYTHON_VERSION: "3.9"

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: '${{ env.PYTHON_VERSION }}'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          wget unzip openjdk-17-jdk \
          autoconf automake libtool autoconf-archive \
          libffi-dev libssl-dev git make p7zip-full curl zlib1g-dev

    - name: Install Buildozer and dependencies
      run: |
        pip install --upgrade pip setuptools wheel
        pip install --upgrade buildozer
        pip install --upgrade Cython==0.29.36

    - name: Verify and update buildozer.spec
      run: |
        if [ ! -f "buildozer.spec" ]; then
          buildozer init
          echo "Created new buildozer.spec"
        fi

        # 更新 NDK 配置
        if grep -q "android.ndk" buildozer.spec; then
          sed -i "s|android.ndk =.*|android.ndk = ${{ env.NDK_VERSION }}|" buildozer.spec
        else
          echo "android.ndk = ${{ env.NDK_VERSION }}" >> buildozer.spec
        fi

        # 强制指定 ndk_path，避免 Buildozer 重复下载
        if grep -q "android.ndk_path" buildozer.spec; then
          sed -i "s|android.ndk_path =.*|android.ndk_path = /home/runner/.buildozer/android/packages/android-ndk-r${{ env.NDK_VERSION }}|" buildozer.spec
        else
          echo "android.ndk_path = /home/runner/.buildozer/android/packages/android-ndk-r${{ env.NDK_VERSION }}" >> buildozer.spec
        fi

        # 确保 16K 对齐参数存在
        if ! grep -q "android.extra_ldflags" buildozer.spec; then
          echo 'android.extra_ldflags = -Wl,-z,max-page-size=16384,-z,common-page-size=16384' >> buildozer.spec
        fi

        echo "Final buildozer.spec settings:"
        grep -E "(android.ndk|android.ndk_path|android.extra_ldflags)" buildozer.spec || true

    - name: Download Android NDK (Enhanced Reliability)
      run: |
        NDK_CACHE_PATH="$HOME/.buildozer/android/packages"
        mkdir -p $NDK_CACHE_PATH
        NDK_URL="https://googledownloads.cn/android/repository/android-ndk-r${{ env.NDK_VERSION }}-linux.zip"
        NDK_ZIP_PATH="$NDK_CACHE_PATH/ndk.zip"

        echo "Downloading from reliable mirror: $NDK_URL"
        MAX_ATTEMPTS=5
        for ((attempt=1; attempt<=$MAX_ATTEMPTS; attempt++)); do
          echo "Attempt $attempt/$MAX_ATTEMPTS: Downloading NDK..."
          if curl -L --progress-bar --retry 3 --retry-delay 10 --max-time 120 -o "$NDK_ZIP_PATH" "$NDK_URL"; then
            echo "Download completed. Verifying file integrity..."
            if unzip -tq "$NDK_ZIP_PATH" &>/dev/null; then
              echo "ZIP file integrity verified. Extracting..."
              unzip -q "$NDK_ZIP_PATH" -d "$NDK_CACHE_PATH"
              if [ -d "$NDK_CACHE_PATH/android-ndk-r${{ env.NDK_VERSION }}" ]; then
                echo "NDK ${{ env.NDK_VERSION }} successfully installed!"
                echo "NDK_PATH=$NDK_CACHE_PATH/android-ndk-r${{ env.NDK_VERSION }}" >> $GITHUB_ENV
                break
              else
                echo "Error: Extraction succeeded but directory not found!"
                rm -f "$NDK_ZIP_PATH"
              fi
            else
              echo "Error: Downloaded ZIP file is corrupted or incomplete!"
              rm -f "$NDK_ZIP_PATH"
            fi
          else
            echo "Download attempt $attempt failed."
            rm -f "$NDK_ZIP_PATH"
          fi

          if [ $attempt -lt $MAX_ATTEMPTS ]; then
            echo "Waiting 30 seconds before next attempt..."
            sleep 30
          else
            echo "Error: All $MAX_ATTEMPTS download attempts failed!"
            exit 1
          fi
        done

    - name: Build with Buildozer
      run: |
        export ANDROID_NDK_HOME="$HOME/.buildozer/android/packages/android-ndk-r${{ env.NDK_VERSION }}"
        export PATH="$ANDROID_NDK_HOME:$PATH"
        echo "Using NDK path: $ANDROID_NDK_HOME"
        buildozer -v android debug

    - name: Verify build output
      run: |
        if ls bin/*.apk 1> /dev/null 2>&1; then
          APK_FILE=$(ls bin/*.apk | head -1)
          echo "Build successful! APK file: $APK_FILE"
          echo "File size: $(du -h "$APK_FILE" | cut -f1)"
        else
          echo "Error: No APK file found in bin/ directory!"
          exit 1
        fi

    - name: Prepare logs for analysis
      if: always()
      run: |
        mkdir -p build_logs
        find . -name "*.log" -exec cp {} build_logs/ \; 2>/dev/null || true
        cp buildozer.spec build_logs/ || true
        echo "Logs prepared for upload:"
        ls -la build_logs/ || true

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk
        retention-days: 7

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: build_logs/
        if-no-files-found: ignore
        retention-days: 7

    - name: Fallback - Direct p4a build
      if: failure()
      run: |
        echo "=== Buildozer failed, trying direct python-for-android ==="
        export ANDROID_NDK_HOME="$HOME/.buildozer/android/packages/android-ndk-r${{ env.NDK_VERSION }}"
        export PATH="$ANDROID_NDK_HOME:$PATH"
        pip install python-for-android
        python -m pythonforandroid.toolchain apk \
          --dist_name myapp \
          --bootstrap sdl2 \
          --requirements python3,kivy \
          --arch arm64-v8a \
          --ndk-path "$ANDROID_NDK_HOME" \
          --debug
        if ls dist/*.apk 1> /dev/null 2>&1; then
          APK_FILE=$(ls dist/*.apk | head -1)
          echo "P4A build successful! APK file: $APK_FILE"
          mkdir -p bin
          cp "$APK_FILE" bin/
        else
          echo "P4A build also failed!"
          exit 1
        fi
