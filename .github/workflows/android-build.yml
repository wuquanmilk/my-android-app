name: Android APK Builder with API 31

on:
  workflow_dispatch:  # 允许手动触发
  push:               # 推送代码时自动触发
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: 设置 Android NDK (使用镜像)
      run: |
    NDK_URL="https://repo.huaweicloud.com/android/repository/android-ndk-r28c-linux.zip" # 使用镜像
    NDK_CACHE_PATH="$HOME/.buildozer/android/packages/ndk/"
    mkdir -p $NDK_CACHE_PATH
    wget --tries=3 --timeout=60 -O $NDK_CACHE_PATH/android-ndk-r28c-linux.zip $NDK_URL || exit 1
    - name: Download Android NDK (with retry)
      run: |
    # 设置镜像源和重试参数
    NDK_URL="https://dl.google.com/android/repository/android-ndk-r28c-linux.zip"
    # 使用 wget 命令，支持重试和超时设置
    wget --tries=3 --timeout=60 -O android-ndk-r28c-linux.zip "$NDK_URL" || exit 1
    # 检查文件是否下载完整
    if [ ! -f "android-ndk-r28c-linux.zip" ]; then
        echo "Error: NDK download failed!"
        exit 1
    fi
    # 解压并设置环境变量
    unzip -q android-ndk-r28c-linux.zip -d $HOME/android-ndk
    echo "ANDROID_NDK_HOME=$HOME/android-ndk/android-ndk-r28c" >> $GITHUB_ENV
    echo "PATH=$HOME/android-ndk/android-ndk-r28c:$PATH" >> $GITHUB_ENV

    - name: Clean previous builds and caches
      run: |
    # 清理 buildozer 缓存
    buildozer android clean
    # 删除可能不完整的临时文件
    rm -rf .buildozer/android/packages
    rm -rf /tmp/*

    - name: Install Buildozer and dependencies
      run: |
    pip install --upgrade pip setuptools wheel
    pip install --upgrade buildozer  # 确保最新版
    pip install --upgrade Cython==0.29.36  # 固定兼容版本
    - name: Build APK
      run: buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk
