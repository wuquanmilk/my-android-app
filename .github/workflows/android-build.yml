name: Android APK Builder (NDK 28c + API 31)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

env:
  NDK_VERSION: "28c"
  ANDROID_API: 31
  MIN_API: 21
  BUILD_TOOLS: "34.0.0"

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          wget unzip openjdk-17-jdk \
          autoconf automake libtool \
          libffi-dev libssl-dev git make

    - name: Install Buildozer and dependencies
      run: |
        pip install --upgrade pip setuptools wheel
        pip install --upgrade buildozer
        pip install --upgrade Cython==0.29.36

    - name: Initialize Buildozer
      run: |
        # 初始化Buildozer配置
        buildozer init
        # 检查生成的配置文件
        if [ -f "buildozer.spec" ]; then
          echo "Buildozer initialized successfully"
        else
          echo "Buildozer initialization may have failed"
          exit 1
        fi

    - name: Download Android NDK (with enhanced retry)
      run: |
        # 设置NDK缓存路径
        NDK_CACHE_PATH="$HOME/.buildozer/android/packages/ndk"
        mkdir -p $NDK_CACHE_PATH
        
        # 尝试多个下载源
        NDK_URLS=(
          "https://dl.google.com/android/repository/android-ndk-r${{ env.NDK_VERSION }}-linux.zip"
          "https://repo.huaweicloud.com/android/repository/android-ndk-r${{ env.NDK_VERSION }}-linux.zip"
        )
        
        for NDK_URL in "${NDK_URLS[@]}"; do
          echo "Trying to download from: $NDK_URL"
          if wget --tries=3 --timeout=120 -O "$NDK_CACHE_PATH/ndk.zip" "$NDK_URL"; then
            echo "Successfully downloaded NDK from $NDK_URL"
            # 解压NDK
            unzip -q "$NDK_CACHE_PATH/ndk.zip" -d "$NDK_CACHE_PATH"
            # 设置环境变量
            echo "ANDROID_NDK_HOME=$NDK_CACHE_PATH/android-ndk-r${{ env.NDK_VERSION }}" >> $GITHUB_ENV
            echo "PATH=$NDK_CACHE_PATH/android-ndk-r${{ env.NDK_VERSION }}:$PATH" >> $GITHUB_ENV
            break
          else
            echo "Failed to download from $NDK_URL"
            rm -f "$NDK_CACHE_PATH/ndk.zip"
          fi
        done
        
        # 验证NDK是否成功下载和解压
        if [ ! -d "$NDK_CACHE_PATH/android-ndk-r${{ env.NDK_VERSION }}" ]; then
          echo "Error: All NDK download attempts failed!"
          exit 1
        fi

    - name: Setup Android SDK
      run: |
        # 创建Android SDK目录
        mkdir -p android-sdk
        
        # 下载命令行工具
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip -d android-sdk/cmdline-tools
        mv android-sdk/cmdline-tools/cmdline-tools android-sdk/cmdline-tools/latest
        
        # 设置环境变量
        echo "ANDROID_HOME=$GITHUB_WORKSPACE/android-sdk" >> $GITHUB_ENV
        echo "PATH=$GITHUB_WORKSPACE/android-sdk/cmdline-tools/latest/bin:$PATH" >> $GITHUB_ENV
        
        # 接受许可协议
        yes | sdkmanager --licenses
        
        # 安装必要的Android组件
        sdkmanager "platforms;android-${{ env.ANDROID_API }}" \
                   "build-tools;${{ env.BUILD_TOOLS }}" \
                   "platform-tools"

    - name: Build with Buildozer
      run: |
        # 设置Buildozer使用的NDK路径
        export ANDROID_NDK_HOME="$HOME/.buildozer/android/packages/ndk/android-ndk-r${{ env.NDK_VERSION }}"
        
        # 打印调试信息
        echo "Current working directory: $(pwd)"
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "PATH: $PATH"
        
        # 检查.buildozer目录结构
        if [ -d ".buildozer" ]; then
          echo ".buildozer directory exists"
          find ".buildozer" -type d | head -20
        else
          echo ".buildozer directory does not exist"
        fi
        
        # 执行构建
        buildozer -v android debug

    - name: Upload APK artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk
        retention-days: 7

    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          .buildozer/**/*.log
          *.log
