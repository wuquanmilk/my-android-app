name: Android APK Build (Stable - NDK r28c)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - '**.kv'
      - 'buildozer.spec'
      - '.github/workflows/**'

env:
  NDK_VERSION: "28c"           # NDK 版本简称 (用于URL)
  NDK_FULL_VERSION: "28.2.13676358" # NDK 完整版本号 (用于buildozer.spec)
  ANDROID_API: 31
  MIN_API: 21
  BUILD_TOOLS: "34.0.0"
  PYTHON_VERSION: "3.9"

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 50

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: '${{ env.PYTHON_VERSION }}'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          wget unzip openjdk-17-jdk \
          autoconf automake libtool \
          libffi-dev libssl-dev git make p7zip-full

    - name: Install Buildozer and dependencies
      run: |
        pip install --upgrade pip setuptools wheel
        pip install --upgrade buildozer
        pip install --upgrade Cython==0.29.36

    - name: Conditional Buildozer Initialization
      run: |
        if [ ! -f "buildozer.spec" ]; then
          buildozer init
          echo "Buildozer initialized successfully"
        else
          echo "buildozer.spec already exists, checking configuration..."
          if grep -q "android.ndk" buildozer.spec; then
            sed -i "s|android.ndk =.*|android.ndk = ${{ env.NDK_FULL_VERSION }}|" buildozer.spec
            echo "Updated buildozer.spec to use NDK ${{ env.NDK_FULL_VERSION }}"
          else
            echo "android.ndk = ${{ env.NDK_FULL_VERSION }}" >> buildozer.spec
            echo "Added NDK configuration to buildozer.spec"
          fi
        fi

    - name: Download Android NDK (Using Your Mirror)
      run: |
        NDK_CACHE_PATH="$HOME/.buildozer/android/packages"
        mkdir -p $NDK_CACHE_PATH
        
        # 使用您提供的镜像源
        NDK_URL="https://googledownloads.cn/android/repository/android-ndk-r${{ env.NDK_VERSION }}-linux.zip"
        NDK_ZIP_PATH="$NDK_CACHE_PATH/ndk.zip"
        
        echo "Using your mirror: $NDK_URL"
        
        # 增强的重试机制
        MAX_ATTEMPTS=5
        for ((attempt=1; attempt<=$MAX_ATTEMPTS; attempt++)); do
          echo "Attempt $attempt/$MAX_ATTEMPTS: Downloading NDK..."
          
          # 使用wget下载，显示进度，设置超时和重试
          if wget --progress=bar:force --tries=3 --timeout=120 -O "$NDK_ZIP_PATH" "$NDK_URL" 2>&1; then
            echo "Download completed. Verifying file integrity..."
            
            # 验证ZIP文件完整性
            if unzip -tq "$NDK_ZIP_PATH" &>/dev/null; then
              echo "ZIP file integrity verified. Extracting..."
              
              # 解压NDK
              unzip -q "$NDK_ZIP_PATH" -d "$NDK_CACHE_PATH"
              
              # 验证解压后的目录
              if [ -d "$NDK_CACHE_PATH/android-ndk-r${{ env.NDK_VERSION }}" ]; then
                echo "NDK ${{ env.NDK_VERSION }} successfully installed!"
                echo "NDK_PATH=$NDK_CACHE_PATH/android-ndk-r${{ env.NDK_VERSION }}" >> $GITHUB_ENV
                exit 0
              else
                echo "Error: Extraction succeeded but directory not found!"
              fi
            else
              echo "Error: Downloaded ZIP file is corrupted or incomplete!"
              rm -f "$NDK_ZIP_PATH"
            fi
          else
            echo "Download attempt $attempt failed."
            rm -f "$NDK_ZIP_PATH"
          fi
          
          # 如果不是最后一次尝试，等待后重试
          if [ $attempt -lt $MAX_ATTEMPTS ]; then
            echo "Waiting 30 seconds before next attempt..."
            sleep 30
          fi
        done
        
        echo "Error: All $MAX_ATTEMPTS download attempts failed!"
        echo "Please check:"
        echo "1. The mirror URL availability: $NDK_URL"
        echo "2. Network connectivity"
        exit 1

    - name: Build with Buildozer
      run: |
        # 设置环境变量
        export ANDROID_NDK_HOME="$HOME/.buildozer/android/packages/android-ndk-r${{ env.NDK_VERSION }}"
        export PATH="$ANDROID_NDK_HOME:$PATH"
        
        echo "Using NDK path: $ANDROID_NDK_HOME"
        echo "NDK contents:"
        ls "$ANDROID_NDK_HOME" | head -10
        
        # 执行构建并捕获输出到日志文件
        buildozer -v android debug 2>&1 | tee build_output.log

    - name: Prepare logs for upload
      if: always()
      run: |
        # 创建日志目录
        mkdir -p logs
        
        # 复制所有可能的日志文件
        if [ -d ".buildozer" ]; then
          echo "Copying .buildozer logs..."
          find .buildozer -name "*.log" -exec cp {} logs/ \;
        else
          echo ".buildozer directory not found"
        fi
        
        # 复制构建输出日志
        if [ -f "build_output.log" ]; then
          echo "Copying build output log..."
          cp build_output.log logs/
        fi
        
        # 复制配置文件
        if [ -f "buildozer.spec" ]; then
          echo "Copying buildozer.spec..."
          cp buildozer.spec logs/
        fi
        
        # 显示准备上传的日志文件
        echo "Logs prepared for upload:"
        ls -la logs/ || true

    - name: Verify build output
      run: |
        if ls bin/*.apk 1> /dev/null 2>&1; then
          APK_FILE=$(ls bin/*.apk | head -1)
          echo "Build successful! APK file: $APK_FILE"
          echo "File size: $(du -h "$APK_FILE" | cut -f1)"
        else
          echo "Error: No APK file found in bin/ directory!"
          echo "Contents of bin/:"
          ls -la bin/ || true
          exit 1
        fi

    - name: Upload APK artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-${{ github.run_number }}
        path: bin/*.apk
        retention-days: 7

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ github.run_number }}
        path: logs/
        if-no-files-found: ignore
