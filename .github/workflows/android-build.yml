name: Android APK Build (NDK r28c + 16K Alignment)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - '**.kv'
      - 'buildozer.spec'
      - '.github/workflows/**'

env:
  NDK_VERSION: "28c"
  ANDROID_API: 31
  MIN_API: 21
  BUILD_TOOLS: "34.0.0"
  PYTHON_VERSION: "3.9"

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 90

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: '${{ env.PYTHON_VERSION }}'

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          wget unzip openjdk-17-jdk \
          autoconf automake libtool pkg-config m4 \
          autoconf-archive \
          libffi-dev libssl-dev git make p7zip-full curl zlib1g-dev

    - name: Install Buildozer and dependencies
      run: |
        pip install --upgrade pip setuptools wheel
        pip install --upgrade buildozer
        pip install --upgrade Cython==0.29.36

    - name: Verify and update buildozer.spec
      run: |
        if [ ! -f "buildozer.spec" ]; then buildozer init; fi
        sed -i "s|android.ndk =.*|android.ndk = ${{ env.NDK_VERSION }}|" buildozer.spec || echo "android.ndk = ${{ env.NDK_VERSION }}" >> buildozer.spec
        sed -i "s|android.ndk_path =.*|android.ndk_path = /home/runner/.buildozer/android/packages/android-ndk-r${{ env.NDK_VERSION }}|" buildozer.spec || echo "android.ndk_path = /home/runner/.buildozer/android/packages/android-ndk-r${{ env.NDK_VERSION }}" >> buildozer.spec
        grep -q "android.extra_ldflags" buildozer.spec || echo 'android.extra_ldflags = -Wl,-z,max-page-size=16384,-z,common-page-size=16384' >> buildozer.spec

    - name: Download Android NDK r28c
      run: |
        NDK_CACHE="$HOME/.buildozer/android/packages"
        mkdir -p $NDK_CACHE
        NDK_ZIP="$NDK_CACHE/ndk.zip"
        NDK_URL="https://dl.google.com/android/repository/android-ndk-r${{ env.NDK_VERSION }}-linux.zip"

        MAX_ATTEMPTS=5
        for ((i=1;i<=MAX_ATTEMPTS;i++)); do
          echo "Download attempt $i"
          wget --tries=3 --retry-connrefused -O "$NDK_ZIP" "$NDK_URL"
          unzip -tq "$NDK_ZIP" && break
          echo "Download or zip test failed, retrying..."
          rm -f "$NDK_ZIP"
          sleep 10
          if [ $i -eq $MAX_ATTEMPTS ]; then echo "NDK download failed"; exit 1; fi
        done

        unzip -qq "$NDK_ZIP" -d "$NDK_CACHE"
        export ANDROID_NDK_HOME="$NDK_CACHE/android-ndk-r${{ env.NDK_VERSION }}"
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV

    - name: Patch libffi for Autoconf/Libtool
      run: |
        LIBFFI_DIR="$HOME/.buildozer/android/build/libffi"
        if [ -d "$LIBFFI_DIR" ]; then
          cd "$LIBFFI_DIR"
          rm -rf configure config.cache config.log autom4te.cache
          autoupdate || true
          libtoolize --force --copy
          aclocal -I m4
          autoreconf -fi
          echo "libffi patched successfully"
        fi

    - name: Build APK with Buildozer
      run: |
        export ANDROID_NDK_HOME="$HOME/.buildozer/android/packages/android-ndk-r${{ env.NDK_VERSION }}"
        export PATH="$ANDROID_NDK_HOME:$PATH"
        buildozer -v android debug

    - name: Verify build output
      run: |
        if ls bin/*.apk 1> /dev/null 2>&1; then
          APK_FILE=$(ls bin/*.apk | head -1)
          echo "Build successful: $APK_FILE"
        else
          echo "No APK generated"; exit 1
        fi

    - name: Prepare logs
      if: always()
      run: |
        mkdir -p build_logs
        find . -name "*.log" -exec cp {} build_logs/ \; 2>/dev/null || true
        cp buildozer.spec build_logs/ || true

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk
        retention-days: 7

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: build_logs/
        if-no-files-found: ignore
        retention-days: 7

    - name: Fallback - Direct p4a build
      if: failure()
      run: |
        export ANDROID_NDK_HOME="$HOME/.buildozer/android/packages/android-ndk-r${{ env.NDK_VERSION }}"
        export PATH="$ANDROID_NDK_HOME:$PATH"
        pip install python-for-android
        python -m pythonforandroid.toolchain apk \
          --dist_name myapp \
          --bootstrap sdl2 \
          --requirements python3,kivy \
          --arch arm64-v8a \
          --ndk-path "$ANDROID_NDK_HOME" \
          --debug
        if ls dist/*.apk 1> /dev/null 2>&1; then
          mkdir -p bin
          cp $(ls dist/*.apk | head -1) bin/
        else
          echo "Direct p4a build failed"; exit 1
        fi
