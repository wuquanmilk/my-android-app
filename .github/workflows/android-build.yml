name: Android APK Build (Direct Gradle - No Buildozer)

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - '**.kv'
      - 'buildozer.spec'
      - '.github/workflows/**'

env:
  NDK_VERSION: "28c"
  GRADLE_VERSION: "8.5"
  ANDROID_API: 31
  PYTHON_VERSION: "3.9"

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 50

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '${{ env.PYTHON_VERSION }}'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          wget unzip openjdk-17-jdk \
          autoconf automake libtool \
          libffi-dev libssl-dev git make

    - name: Install Android NDK manually
      run: |
        echo "=== 手动安装 Android NDK ==="
        
        # 创建目录
        mkdir -p $HOME/android-ndk
        NDK_DIR="$HOME/android-ndk"
        
        # 使用可靠的镜像源下载 NDK
        NDK_URL="https://googledownloads.cn/android/repository/android-ndk-r${{ env.NDK_VERSION }}-linux.zip"
        
        echo "下载 NDK from: $NDK_URL"
        curl -L --progress-bar --retry 3 --max-time 300 -o /tmp/ndk.zip "$NDK_URL"
        
        # 验证并解压
        if unzip -tq /tmp/ndk.zip; then
          unzip -q /tmp/ndk.zip -d "$NDK_DIR"
          rm /tmp/ndk.zip
          echo "NDK 安装成功!"
        else
          echo "NDK 文件损坏!"
          exit 1
        fi
        
        # 设置环境变量
        echo "ANDROID_NDK_HOME=$NDK_DIR/android-ndk-r${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "NDK_HOME=$NDK_DIR/android-ndk-r${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "PATH=$NDK_DIR/android-ndk-r${{ env.NDK_VERSION }}:$PATH" >> $GITHUB_ENV

    - name: Install Gradle directly
      run: |
        echo "=== 安装 Gradle ==="
        
        # 下载并安装指定版本的 Gradle
        GRADLE_URL="https://services.gradle.org/distributions/gradle-${{ env.GRADLE_VERSION }}-bin.zip"
        echo "下载 Gradle from: $GRADLE_URL"
        
        curl -L --progress-bar -o /tmp/gradle.zip "$GRADLE_URL"
        unzip -q /tmp/gradle.zip -d /opt/
        rm /tmp/gradle.zip
        
        # 设置环境变量
        GRADLE_HOME="/opt/gradle-${{ env.GRADLE_VERSION }}"
        echo "GRADLE_HOME=$GRADLE_HOME" >> $GITHUB_ENV
        echo "PATH=$GRADLE_HOME/bin:$PATH" >> $GITHUB_ENV
        
        echo "Gradle 安装完成!"

    - name: Install Python-for-Android and dependencies
      run: |
        echo "=== 安装 Python-for-Android ==="
        
        # 安装 p4a
        pip install python-for-android
        
        # 安装其他依赖
        pip install cython==0.29.36
        pip install kivy

    - name: Create Android project with p4a
      run: |
        echo "=== 使用 p4a 创建 Android 项目 ==="
        
        # 设置环境变量
        export ANDROID_NDK_HOME="$HOME/android-ndk/android-ndk-r${{ env.NDK_VERSION }}"
        export NDK_HOME="$ANDROID_NDK_HOME"
        export GRADLE_HOME="/opt/gradle-${{ env.GRADLE_VERSION }}"
        export PATH="$ANDROID_NDK_HOME:$GRADLE_HOME/bin:$PATH"
        
        # 使用 p4a 创建项目
        python -m pythonforandroid.toolchain create \
          --dist_name myapp \
          --bootstrap sdl2 \
          --requirements python3,kivy \
          --arch arm64-v8a \
          --ndk-path "$ANDROID_NDK_HOME" \
          --sdk-version ${{ env.ANDROID_API }} \
          --private . \
          --debug

    - name: Build APK with direct Gradle
      run: |
        echo "=== 直接使用 Gradle 构建 APK ==="
        
        # 设置环境变量
        export ANDROID_NDK_HOME="$HOME/android-ndk/android-ndk-r${{ env.NDK_VERSION }}"
        export GRADLE_HOME="/opt/gradle-${{ env.GRADLE_VERSION }}"
        export PATH="$ANDROID_NDK_HOME:$GRADLE_HOME/bin:$PATH"
        
        # 找到 p4a 生成的项目目录
        P4A_DIST_DIR="$HOME/.local/share/python-for-android/dists/myapp"
        
        if [ -d "$P4A_DIST_DIR" ]; then
          echo "找到 p4a 项目目录: $P4A_DIST_DIR"
          cd "$P4A_DIST_DIR"
          
          # 直接使用系统 Gradle 构建（如您建议的）
          echo "使用系统 Gradle 构建..."
          "$GRADLE_HOME/bin/gradle" clean assembleDebug --no-daemon --stacktrace
          
          # 检查构建结果
          if [ $? -eq 0 ]; then
            echo "Gradle 构建成功!"
            
            # 查找生成的 APK
            APK_PATH=$(find . -name "*.apk" | head -1)
            if [ -n "$APK_PATH" ]; then
              echo "找到 APK: $APK_PATH"
              # 复制 APK 到工作目录
              mkdir -p $GITHUB_WORKSPACE/bin
              cp "$APK_PATH" $GITHUB_WORKSPACE/bin/
              echo "APK 已复制到 bin/ 目录"
            else
              echo "未找到 APK 文件"
              exit 1
            fi
          else
            echo "Gradle 构建失败!"
            exit 1
          fi
        else
          echo "未找到 p4a 项目目录"
          exit 1
        fi

    - name: Verify and test APK
      run: |
        echo "=== 验证 APK ==="
        
        if ls bin/*.apk 1> /dev/null 2>&1; then
          APK_FILE=$(ls bin/*.apk | head -1)
          echo "构建成功! APK 文件: $APK_FILE"
          echo "文件大小: $(du -h "$APK_FILE" | cut -f1)"
          
          # 检查 APK 基本信息
          echo "APK 内容:"
          unzip -l "$APK_FILE" | head -20
        else
          echo "错误: 未找到 APK 文件!"
          exit 1
        fi

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk
        retention-days: 7

    - name: Upload build logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          ~/.local/share/python-for-android/
          /tmp/
        if-no-files-found: ignore
