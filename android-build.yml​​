name: Android APK Builder (NDK 28c + API 31 + 优化配置)

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  NDK_VERSION: "28c"
  ANDROID_API: 31
  MIN_API: 21
  BUILD_TOOLS: "34.0.0"

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: 下载代码和配置文件
      uses: actions/checkout@v4

    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          zip unzip openjdk-17-jdk \
          autoconf automake libtool \
          libffi-dev libssl-dev git wget make

    - name: 安装Buildozer和Cython
      run: pip install buildozer Cython

    - name: 设置Android环境 (NDK r28c)
      run: |
        # 创建Android SDK目录
        mkdir -p android-sdk
        
        # 下载Android命令行工具（使用可靠版本）
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip -d android-sdk/cmdline-tools
        mv android-sdk/cmdline-tools/cmdline-tools android-sdk/cmdline-tools/latest
        
        # 设置环境变量
        echo "ANDROID_HOME=$GITHUB_WORKSPACE/android-sdk" >> $GITHUB_ENV
        echo "PATH=$GITHUB_WORKSPACE/android-sdk/cmdline-tools/latest/bin:$PATH" >> $GITHUB_ENV
        
        # 接受许可协议
        yes | sdkmanager --licenses
        
        # 安装必要的Android组件
        sdkmanager "platforms;android-${{ env.ANDROID_API }}" \
                   "build-tools;${{ env.BUILD_TOOLS }}" \
                   "platform-tools" \
                   "emulator"
        
        # 下载NDK r28c（使用官方可靠地址）
        wget -q https://dl.google.com/android/repository/android-ndk-${{ env.NDK_VERSION }}-linux.zip -O ndk.zip
        unzip -q ndk.zip
        echo "ANDROID_NDK_HOME=$GITHUB_WORKSPACE/android-ndk-${{ env.NDK_VERSION }}" >> $GITHUB_ENV
        echo "PATH=$GITHUB_WORKSPACE/android-ndk-${{ env.NDK_VERSION }}:$PATH" >> $GITHUB_ENV

    - name: 构建APK (使用优化配置)
      run: |
        # 使用verbose模式便于调试
        buildozer -v android debug
        
        # 检查是否生成APK
        if ls bin/*.apk 1> /dev/null 2>&1; then
            echo "✅ APK文件已生成"
        else
            echo "❌ APK文件未生成，构建可能失败"
            exit 1
        fi

    - name: 验证构建结果
      run: |
        APK_FILE=$(find bin -name "*.apk" | head -1)
        if [ -f "$APK_FILE" ]; then
            echo "✅ APK构建成功!"
            echo "📦 文件: $APK_FILE"
            echo "📏 大小: $(du -h "$APK_FILE" | cut -f1)"
        else
            echo "❌ 未找到APK文件"
            exit 1
        fi

    - name: 上传APK产物
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-optimized
        path: bin/*.apk
        retention-days: 7

    - name: 完成通知
      if: success()
      run: |
        echo "🎉 优化构建完成!"
        echo "✅ NDK r28c + API 31 配置"
        echo "✅ Android SDK 组件已安装"
        echo "📦 APK可在Artifacts中下载"
